# XRPL Transparent Aid Wallet - Technical Context for AI

## Project Overview
This is a hackathon project (HTN252) building a transparent, auditable aid distribution platform using Ripple's XRPL testnet. The system addresses aid distribution inefficiencies by providing blockchain-based transparency and reducing intermediary fraud through digital vouchers and real-time tracking.

## Core Architecture

### Backend (FastAPI + Python)
- **Main API**: `src/app.py` - FastAPI application with CORS middleware
- **Database**: Supabase (PostgreSQL) with custom wrapper (`src/core/database.py`)
- **XRPL Integration**: `src/core/xrpl.py` - Handles XRPL testnet transactions, wallet creation, and payment processing
- **Facial Recognition**: `src/core/face.py` - InsightFace integration for biometric authentication
- **Models**: `src/models.py` - Pydantic models for API validation

### Database Schema (Supabase PostgreSQL)
Key tables include:
- `accounts` - NGOs, recipients, donors with XRPL wallet keys
- `recipients` - Aid beneficiaries with XRPL wallet keys (public_key, private_key), basic info (name, location), balance, and verified status
- `payouts` - Store redemption transactions
- `xrpl_transactions` - Blockchain transaction records
- `credentials` - Verifiable credentials (JWT-based)
- `donations`/`expenses` - Financial audit trail

### Frontend Applications (Next.js + TypeScript)
1. **Donor Dashboard** (`src/donor-dashboard/`) - Donation tracking, impact visualization
2. **NGO Dashboard** (`src/NGO-dashboard/`) - Recipient management, voucher issuance, analytics
3. **Payment Terminal** (`src/payment-terminal/`) - Store voucher redemption interface
4. **User Creation Terminal** (`src/user-creation-terminal/`) - Recipient onboarding with face enrollment
5. **Store Dashboard** (`src/store-dashboard/`) - Store payout management

## Key Flows

### 1. Donation Flow
- Donors contribute via card/crypto â†’ XRPL testnet wallets
- Donations tracked in Supabase with XRPL transaction hashes
- Real-time dashboard updates showing impact metrics

### 2. Voucher Issuance
- NGOs create recipients with optional facial recognition enrollment
- Digital vouchers issued as signed JWTs with expiration and amount limits
- Vouchers can be delivered via QR codes or SMS

### 3. Redemption Flow
- Recipients present vouchers at partner stores
- System validates voucher authenticity and policy compliance
- XRPL payment sent to off-ramp partner for fiat conversion
- Store receives local currency payout

### 4. Audit & Transparency
- All transactions recorded on XRPL testnet (public ledger)
- Dashboards show real-time redemption rates and geographic distribution
- Exportable reports for compliance and donor transparency

## Technical Implementation Details

### XRPL Integration
- Uses `xrpl-py` library for testnet integration
- Custodial wallet model (server-managed keys for MVP)
- Automatic XRP to fiat conversion via mock off-ramp
- Transaction memos for metadata tracking

### Security Features
- JWT-based authentication with role-based access
- Face embedding storage for biometric verification
- Rate limiting on redemptions per recipient/store
- Encrypted PII with masked display
- Voucher nonce protection against replay attacks

### AI/ML Components
- **InsightFace**: Facial recognition for recipient authentication
- **Planned AI Agents**:
  - SMS Copilot for multilingual support
  - Fraud Guard for anomaly detection
  - Policy Agent for rule enforcement
  - Analytics Copilot for impact summaries

## Development Status
- Core XRPL integration and database schema complete
- Basic dashboards and voucher system functional
- Facial recognition enrollment in progress
- AI agents and advanced fraud detection planned
- Currently using XRPL testnet with mock exchange rates

## Key Dependencies
- **Backend**: FastAPI, Supabase, xrpl-py, InsightFace, PyJWT
- **Frontend**: Next.js, React, Tailwind CSS, Radix UI, Recharts
- **Blockchain**: XRPL testnet
- **Database**: PostgreSQL via Supabase
- **Authentication**: JWT with bcrypt password hashing

## Environment Configuration
Requires Supabase credentials, XRPL testnet RPC endpoint, and various API keys for full functionality. See `.env` requirements in README.md.

## File Structure Notes
- `src/routers/` - API endpoint modules (accounts, recipients, financial, etc.)
- `src/core/` - Core utilities (database, XRPL, auth, face recognition)
- Each frontend app has independent Next.js configuration
- Schema definitions in `schema.txt` and `src/models.py`

This is a proof-of-concept demonstrating blockchain-based transparency in humanitarian aid distribution, with plans for production hardening including non-custodial wallets and enterprise-grade security.
